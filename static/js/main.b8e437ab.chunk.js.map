{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/ApiMethods.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","setIsPostOpen","isPostOpen","setIsFormOpen","className","map","post","id","title","onClick","type","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","openPost","setPostComments","setHasError","setOpenForm","useState","name","email","formInputs","setFormInputs","loading","setLoading","tuched","setTouched","checkInputName","trim","checkEmailName","checkBodyName","handleChange","e","target","value","prev","onSubmit","preventDefault","newComment","postId","res","catch","finally","htmlFor","placeholder","classNames","onChange","required","PostDetails","isFormOpen","postComments","hasError","handleDeleteComments","comId","updatePostComments","index","findIndex","com","splice","useEffect","resolvedPostComments","length","comment","href","UserSelector","setSelectedUser","selectedUser","allUsers","setAllUsers","dropdownTrigger","setDropdownTrigger","users","role","hidden","user","handleSelect","App","setUserPosts","posts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8e437ab.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[],\n  setIsPostOpen: (post: Post | null) => void,\n  isPostOpen: Post | null,\n  setIsFormOpen: (value: boolean) => void,\n};\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  setIsPostOpen,\n  isPostOpen,\n  setIsFormOpen,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {userPosts.map((post) => (\n          <tr data-cy=\"Post\" key={post.id}>\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">{post.title}</td>\n\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events */}\n            <td\n              className=\"has-text-right is-vcentered\"\n              onClick={() => setIsFormOpen(false)}\n            >\n              {isPostOpen && isPostOpen.id === post.id ? (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link\"\n                  onClick={() => setIsPostOpen(null)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className=\"button is-link is-light\"\n                  onClick={() => setIsPostOpen(post)}\n                >\n                  Open\n                </button>\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: unknown = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: unknown) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: unknown) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/ApiMethods';\n\ntype Props = {\n  openPost: Post | null,\n  setPostComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setHasError: (value: boolean) => void,\n  setOpenForm: (value: boolean) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  openPost,\n  setPostComments,\n  setHasError,\n  setOpenForm,\n}) => {\n  const [formInputs, setFormInputs] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n  const [loading, setLoading] = useState(false);\n  const [tuched, setTouched] = useState(false);\n\n  const checkInputName = !formInputs.name.trim() && tuched;\n  const checkEmailName = !formInputs.email.trim() && tuched;\n  const checkBodyName = !formInputs.body.trim() && tuched;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n\n    setTouched(false);\n    setFormInputs(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleClear = () => {\n    setTouched(false);\n    setFormInputs({\n      name: '',\n      email: '',\n      body: '',\n    });\n  };\n\n  const handleSubmitForm = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (openPost) {\n      const newComment = { ...formInputs, postId: openPost.id };\n\n      setLoading(true);\n\n      addComment(newComment)\n        .then(res => {\n          setPostComments(prev => ([...prev, res]));\n          setFormInputs(prev => ({ ...prev, body: '' }));\n          setTouched(false);\n        })\n        .catch(() => {\n          setHasError(true);\n          setOpenForm(false);\n        })\n        .finally(() => setLoading(false));\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={handleSubmitForm}>\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': checkInputName })}\n            value={formInputs.name}\n            onChange={handleChange}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {checkInputName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkInputName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': checkEmailName })}\n            value={formInputs.email}\n            onChange={handleChange}\n            required\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {checkEmailName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {checkEmailName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': checkBodyName })}\n            value={formInputs.body}\n            onChange={handleChange}\n            required\n          />\n        </div>\n\n        {checkBodyName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            onClick={() => setTouched(true)}\n            className={classNames('button', 'is-link', {\n              'is-loading': loading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n// is-loading\n","import { User } from '../types/User';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getComment = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const addComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\n\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { getComment, deleteComment } from '../api/ApiMethods';\nimport { NewCommentForm } from './NewCommentForm';\n\ntype Props = {\n  isPostOpen: Post | null,\n  setIsFormOpen: (value: boolean) => void,\n  isFormOpen: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  isPostOpen,\n  setIsFormOpen,\n  isFormOpen,\n}) => {\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleDeleteComments = (comId: number) => {\n    deleteComment(comId)\n      .then(() => {\n        const updatePostComments = [...postComments];\n        const index = updatePostComments.findIndex(com => com.id === comId);\n\n        updatePostComments.splice(index, 1);\n        setPostComments(updatePostComments);\n      })\n      .catch(() => setHasError(true));\n  };\n\n  useEffect(() => {\n    if (isPostOpen) {\n      setLoading(true);\n      setHasError(false);\n\n      getComment(isPostOpen.id)\n        .then(resolvedPostComments => setPostComments(resolvedPostComments))\n        .catch(() => setHasError(true))\n        .finally(() => setLoading(false));\n    }\n  }, [isPostOpen]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">{`#${isPostOpen?.id}: ${isPostOpen?.title}`}</h2>\n\n          <p data-cy=\"PostBody\">{isPostOpen?.body}</p>\n        </div>\n\n        {!hasError && (\n          <div className=\"block\">\n            {loading ? (\n              <Loader />\n            ) : (\n              <>\n                {postComments.length === 0 ? (\n                  <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                    No comments yet\n                  </p>\n                ) : (\n                  <>\n                    <p className=\"title is-4\">Comments:</p>\n                    {postComments.map((comment) => (\n                      <article\n                        className=\"message is-small\"\n                        data-cy=\"Comment\"\n                        key={comment.id}\n                      >\n                        <div className=\"message-header\">\n                          <a\n                            href={`mailto:${comment.email}`}\n                            data-cy=\"CommentAuthor\"\n                          >\n                            {comment.name}\n                          </a>\n                          <button\n                            data-cy=\"CommentDelete\"\n                            type=\"button\"\n                            className=\"delete is-small\"\n                            aria-label=\"delete\"\n                            onClick={() => handleDeleteComments(comment.id)}\n                          >\n                            delete button\n                          </button>\n                        </div>\n\n                        <div className=\"message-body\" data-cy=\"CommentBody\">\n                          {comment.body}\n                        </div>\n                      </article>\n                    ))}\n                  </>\n                )}\n\n                {!isFormOpen && (\n                  <button\n                    data-cy=\"WriteCommentButton\"\n                    type=\"button\"\n                    className=\"button is-link\"\n                    onClick={() => setIsFormOpen(true)}\n                  >\n                    Write a comment\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        )}\n\n        {hasError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {isFormOpen && (\n          <NewCommentForm\n            openPost={isPostOpen}\n            setPostComments={setPostComments}\n            setHasError={setHasError}\n            setOpenForm={setIsFormOpen}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { User } from '../types/User';\nimport { getUsers } from '../api/ApiMethods';\n\ntype Props = {\n  setSelectedUser: (user: User) => void,\n  selectedUser: User | null,\n  setIsPostOpen: (value: null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  setSelectedUser,\n  selectedUser,\n  setIsPostOpen,\n}) => {\n  const [allUsers, setAllUsers] = useState<null | User[]>(null);\n  const [dropdownTrigger, setDropdownTrigger] = useState(true);\n\n  const handleTrigger = () => {\n    setDropdownTrigger(prev => !prev);\n  };\n\n  const handleSelect = (user: User) => {\n    setSelectedUser(user);\n    setDropdownTrigger(true);\n    setIsPostOpen(null);\n  };\n\n  useEffect(() => {\n    getUsers().then(users => setAllUsers(users));\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleTrigger}\n        >\n          <span>{selectedUser ? selectedUser.name : 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\" hidden={dropdownTrigger}>\n          {allUsers?.map(user => (\n            <a\n              href={`#user-${user.id}`}\n              key={user.id}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n              onClick={() => handleSelect(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nimport { getPosts } from './api/ApiMethods';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isPostOpen, setIsPostOpen] = useState<Post | null>(null);\n  const [isFormOpen, setIsFormOpen] = useState(false);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setLoading(true);\n      setHasError(false);\n\n      getPosts(selectedUser.id)\n        .then(posts => setUserPosts(posts))\n        .catch(() => setHasError(true))\n        .finally(() => setLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                  setIsPostOpen={setIsPostOpen}\n                />\n              </div>\n\n              {loading ? (\n                <Loader />\n              ) : (\n                <div className=\"block\" data-cy=\"MainContent\">\n                  {!selectedUser && (\n                    <p data-cy=\"NoSelectedUser\">No user selected</p>\n                  )}\n\n                  {hasError && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      Something went wrong!\n                    </div>\n                  )}\n\n                  {userPosts.length === 0 && selectedUser && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                  {userPosts.length !== 0 && (\n                    <PostsList\n                      userPosts={userPosts}\n                      setIsPostOpen={setIsPostOpen}\n                      isPostOpen={isPostOpen}\n                      setIsFormOpen={setIsFormOpen}\n                    />\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isPostOpen },\n            )}\n          >\n            {isPostOpen && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  isPostOpen={isPostOpen}\n                  setIsFormOpen={setIsFormOpen}\n                  isFormOpen={isFormOpen}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}